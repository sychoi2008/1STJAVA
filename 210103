package com.company;
import java.util.Scanner;
import java.util.Random;

public class Main {
    public static Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {

        //(1) 형변환 문제
        String a = "100";
        String b = "200";


        System.out.println(Integer.parseInt(a) * Integer.parseInt(b));

        //해설
        String str = scanner.nextLine();

        double d = Double.parseDouble(str);

        // int or Interger(class, include so many method)

        int num1 = Integer.parseInt(a); //integer 타입으로 넘길것이므로
        int num2 = Integer.parseInt(b);

        //(2) 화폐의 갯수

        int money = scanner.nextInt();

        System.out.println("money = "+money+"원");
        System.out.println("만원 = " + money/10/10/10/10%10);
        System.out.println("천원 = " + money/10/10/10%10);
        System.out.println("백원 = " + money/10/10%10);
        System.out.println("십원 = " + money/10%10);
        
        //(3) 급여 명세서
        int basic = 1500000;
        int mon = 55000;
        int tax = basic/10;

        int real = basic + mon - tax;
        System.out.println("실수령액 : "+ real);
        
        //(4) 큰수
        //삼항연산자 : (조건)? true : false;
        int a = scanner.nextInt();
        int b = scanner.nextInt();

        System.out.println("Input a : "+ a);
        System.out.println("Input b : "+ b);
        int big = (a>b)? a:b;
        System.out.println("큰수 : " + big);
        // System.out.println(a>b : a:b);
        
        
        //(5)
        System.out.print("점수 입력 : ");
        int num = scanner.nextInt();
        if (num < 0 || num>100) System.out.println("입력오류!!");
        
        //(5-1)
        while(true) {
            System.out.print("점수 입력 : ");
            int num = scanner.nextInt();
            if (num < 0 || num>100) break; //break대신 return;도 
        }
        
        
        //(6) 50개의 0-100까지의 난수를 6개씩 출력하고 모든 숫자의 
        Random random = new Random();
        int sum = 0;
        for (int i = 1; i<=50; i++) {
            int num = random.nextInt(100)+1;
            System.out.print(num+ "     ");
            sum += num;
            if(i%6==0) System.out.println();
        }
        System.out.println("\n"+"합="+sum);
        
        //(7)
        // 정답의 숫자도 입력하는 숫자도 모두 컴퓨터가 뽑는 경우
        
        //int a = (int)(Math.random()*10)+1; => 1부터 10까지의 숫자를 랜덤하게 뽑는 것
        Random random = new Random();
        int a = random.nextInt(10)+1;
        // 다음과 같이 random 클래스를 사용해도 된다.
        
        int count = 0;

        System.out.println("*** 난수가 발생하였습니다...맞추어 보세요...***");
        
        while(true) {
            int num = random.nextInt(10);
            System.out.println("숫자 입력 : " + num);
            count++;
            
            if(a>num) System.out.println("컴퓨터의 숫자가 더 큽니다..");
            
            else if(a<num) System.out.println("컴퓨터의 숫자가 더 작습니다..");
            
            else {
                System.out.println("추카추카..."+ count+ "번만에 맞추셨습니다..");
                break;
                }
            }
            
        // 정답의 숫자도 컴퓨터가 뽑고 사용자가 숫자를 입력할 때
        
        // int a = (int)(Math.random()*10)+1;
        Random random = new Random();
        int a = random.nextInt(10)+1;
        int count = 0;

        System.out.println("*** 난수가 발생하였습니다...맞추어 보세요...***");
        while(true) {
            System.out.print("숫자 입력 : ");
            int num = scanner.nextInt();
            count++;

            if(a>num) System.out.println("컴퓨터의 숫자가 더 큽니다..");

            else if(a==num) {
                System.out.println("추카추카..."+ count+ "번만에 맞추셨습니다..");
                break;
            }

            else System.out.println("컴퓨터의 숫자가 더 작습니다..");
        }

        //LPE : NULL POINT EXCEPTION
        // String a = null; => null은 비어있다.

        /* 배열 정리
        
        1) 배열은 반복문과 같이 쓴다.
        2) index에 접근한다.
        3) map, list, array, vector, hash, hashmap
        
        list => 배열의 단점을 극복. 배열로 이루어져있지만 가변적으로 늘려줌. 하지만 검색이 느림. 삽입/삭제는 나쁘지 않음.
        
        map => list 의 단점을 극복. map<값1,값2>. map<id, 회원>. 검색이 좋음. 삽입이 느릴 수 있음.
        
        vector => list와 vector는 단 한가지의 차이가 있다.
        프로세스, 쓰레드도 알아보자
        */
